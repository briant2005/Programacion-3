@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using BBAPP.Data.Models
@using Microsoft.Extensions.DependencyInjection 

@inject NavigationManager Navigation 
@inject IServiceScopeFactory ScopeFactory 
@inject IJSRuntime JS 
@inject UserManager<UsuarioAplicacion> UserManager 

<nav class="nav-container"> @* Añadí una clase para un estilo más específico *@
    <!-- Menú escritorio -->
    <ul class="menu-desktop">
        <li class="logo-pequeno">
            <NavLink href="/">
                <img src="img/logo_LM sin fondo.png" alt="Logo" />
            </NavLink>
        </li>
        @* Bucle para generar los enlaces del menú de escritorio dinámicamente *@
        @foreach (var item in NavItems)
        {
            <AuthorizeView Roles="@(string.IsNullOrEmpty(item.RequiredRoles) ? null : item.RequiredRoles)">
                <Authorized>
                    <li><NavLink href="@item.Href" class="nav-link">@item.Text</NavLink></li>
                </Authorized>
                <NotAuthorized>
                    @* No mostramos el enlace si el usuario no tiene el rol requerido *@
                </NotAuthorized>
            </AuthorizeView>
        }
        <!-- Información del usuario autenticado y botón de cerrar sesión en el menú de escritorio -->
        <AuthorizeView>
            <Authorized>
                <li class="nav-item px-3">
                    <span class="nav-link text-white">¡Hola, @displayName!</span> 
                </li>
                <li class="nav-item px-3">
                    <button class="nav-link btn btn-link text-white" @onclick="Logout">Cerrar sesión</button>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <a href="Identity/Account/Register" class="nav-link text-white">Registrarse</a>
                </li>
                <li class="nav-item px-3">
                    <a href="Identity/Account/Login" class="nav-link text-white">Iniciar sesión</a>
                </li>
            </NotAuthorized>
        </AuthorizeView>
    </ul>

    <!-- Menú móvil -->
    <ul class="mobile-menu">
        <li class="logo-movil">
            <NavLink href="/">
                <img src="img/logo_LM sin fondo.png" alt="Logo" />
            </NavLink>
        </li>
        <li class="menu-button" @onclick="ShowSidebar">
            <svg xmlns="http://www.w3.org/2000/svg" height="26px" viewBox="0 -960 960 960" width="26px" fill="#e3e3e3">
                <path d="M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" />
            </svg>
        </li>
    </ul>

    <!-- Sidebar desplegable (este es el UL con clase 'sidebar' que se oculta/muestra con JS) -->
    <ul class="sidebar" style="display:none;"> @* CRÍTICO: Mantener style="display:none;" aquí para control JS *@
        <li class="close-button" @onclick="HideSidebar">
            <svg xmlns="http://www.w3.org/2000/svg" height="26px" viewBox="0 -960 960 960" width="26px" fill="#e3e3e3">
                <path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" />
            </svg>
        </li>
        @* Bucle para generar los enlaces del sidebar dinámicamente *@
        @foreach (var item in NavItems)
        {
            <AuthorizeView Roles="@(string.IsNullOrEmpty(item.RequiredRoles) ? null : item.RequiredRoles)">
                <Authorized>
                    <li><NavLink href="@item.Href" class="nav-link">@item.Text</NavLink></li>
                </Authorized>
                <NotAuthorized>
                    @* No mostramos el enlace si el usuario no tiene el rol requerido *@
                </NotAuthorized>
            </AuthorizeView>
        }
        <!-- Información del usuario autenticado y botón de cerrar sesión en el sidebar -->
        <AuthorizeView>
            <Authorized>
                <li class="nav-item px-3 mt-3">
                    <span class="nav-link text-white">¡Hola, @displayName!</span> 
                </li>
                <li class="nav-item px-3">
                    <button class="nav-link btn btn-link text-white" @onclick="Logout">Cerrar sesión</button>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-3 mt-3">
                    <a href="Identity/Account/Register" class="nav-link text-white">Registrarse</a>
                </li>
                <li class="nav-item px-3">
                    <a href="Identity/Account/Login" class="nav-link text-white">Iniciar sesión</a>
                </li>
            </NotAuthorized>
        </AuthorizeView>
    </ul>
</nav>

<header class="bienvenida">
    <div class="overlay"></div>
    <div class="contenido">
        <h1>¡Bienvenido a Libromaniacos!</h1>
        <p>Explora el universo de tus libros favoritos</p>
    </div>
</header>

<div class="container">
    @Body 
</div>

@code {
    private string? displayName; 

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } 

    protected override async Task OnParametersSetAsync() 
    {
        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            using (var scope = ScopeFactory.CreateScope())
            {
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<UsuarioAplicacion>>();
                var appUser = await userManager.GetUserAsync(user); 
                if (appUser != null)
                {
                    displayName = appUser.Nombre + " " + appUser.Apellido;
                    if (string.IsNullOrEmpty(displayName?.Trim())) 
                    {
                        displayName = appUser.UserName; 
                    }
                }
                else
                {
                    displayName = user.Identity.Name; 
                }
            }
        }
        else
        {
            displayName = "Invitado"; 
        }
    }

    void ShowSidebar()
    {
        JS.InvokeVoidAsync("showSidebar");
    }

    void HideSidebar()
    {
        JS.InvokeVoidAsync("hideSidebar");
    }

    private void Logout()
    {
        Navigation.NavigateTo("/logout", true); 
    }

    public class NavItem
    {
        public string Text { get; set; }
        public string Href { get; set; }
        public string RequiredRoles { get; set; } = string.Empty; 
        public string IconCssClass { get; set; } = string.Empty; 
    }

    private List<NavItem> NavItems = new List<NavItem>
    {
        new NavItem { Text = "Libros", Href = "/catalogo", IconCssClass = "oi oi-book" },
        new NavItem { Text = "Préstamos", Href = "/prestamos", IconCssClass = "oi oi-loop-circular", RequiredRoles = "Admin, Bibliotecario, Usuario" }, 
        new NavItem { Text = "Realizar Préstamo", Href = "/prestamos/realizar", IconCssClass = "oi oi-plus", RequiredRoles = "Admin, Bibliotecario, Usuario" }, 
        new NavItem { Text = "Perfil", Href = "/perfil", IconCssClass = "oi oi-person", RequiredRoles = "Admin, Bibliotecario, Usuario" }, 
        new NavItem { Text = "Reportes", Href = "/reportes", IconCssClass = "oi oi-graph", RequiredRoles = "Admin, Bibliotecario" }, 
        new NavItem { Text = "Reservas", Href = "/reservas", IconCssClass = "oi oi-calendar", RequiredRoles = "Usuario, Admin, Bibliotecario" }, 
        new NavItem { Text = "Añadir Libro", Href = "libros/anadir", RequiredRoles = "Admin", IconCssClass = "oi oi-plus" },
        new NavItem { Text = "Gestión de Roles", Href = "/admin/roles", IconCssClass = "oi oi-cog", RequiredRoles = "Admin" } 
    };
}
