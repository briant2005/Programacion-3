@page "/admin/roles"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Identity
@using BBAPP.Data.Models
@inject UserManager<UsuarioAplicacion> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager Navigation

<h3>Gestionar Roles de Usuario</h3>

@if (users == null)
{
    <p><em>Cargando usuarios...</em></p>
}
else
{
    <table class="table table-striped table-bordered mt-3">
        <thead class="table-dark">
            <tr>
                <th>Nombre</th>
                <th>Email</th>
                <th>Rol Actual</th>
                <th>Nuevo Rol</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@(user.Nombre + " " + user.Apellido)</td>
                    <td>@user.Email</td>
                    @if (selectedRoles.TryGetValue(user.Id, out var selected))
                    {
                        <select class="form-select" @bind="selectedRoles[user.Id]">
                            @foreach (var role in availableRoles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    }
                    else
                    {
                        <span class="text-muted">Sin rol</span>
                    }
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => UpdateRole(user.Id)">Actualizar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info mt-3">@mensaje</div>
}

@code {
    private List<UsuarioAplicacion> users;
    private Dictionary<string, string> userRoles = new();
    private Dictionary<string, string> selectedRoles = new();
    private List<string> availableRoles = new();
    private string mensaje;

    protected override async Task OnInitializedAsync()
    {
        users = UserManager.Users.ToList();
        availableRoles = RoleManager.Roles.Select(r => r.Name).ToList();

        foreach (var user in users)
        {
            var realUser = await UserManager.FindByIdAsync(user.Id); // force re-fetch
            var roles = await UserManager.GetRolesAsync(realUser);
            Console.WriteLine($"Usuario: {user.Email} → Rol: {string.Join(", ", roles)}");
            if (!userRoles.ContainsKey(user.Id))
                userRoles[user.Id] = "Sin rol";

            if (!selectedRoles.ContainsKey(user.Id))
                selectedRoles[user.Id] = "Sin rol";
            var currentRole = roles.FirstOrDefault() ?? "Sin rol";
            userRoles[user.Id] = currentRole;
            selectedRoles[user.Id] = currentRole;
        }

    }

    private async Task UpdateRole(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user == null)
        {
            mensaje = "Usuario no encontrado.";
            return;
        }

        var roles = await UserManager.GetRolesAsync(user);
        await UserManager.RemoveFromRolesAsync(user, roles);
        await UserManager.AddToRoleAsync(user, selectedRoles[userId]);

        userRoles[user.Id] = selectedRoles[userId];
        mensaje = $"Rol actualizado para {user.UserName}.";
    }
}
